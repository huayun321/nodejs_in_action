第五章  存储Node程序中的数据

    本章内容
        内存和文件系统数据存储
        传统的关系型数据存储
        非关系型数据存储

    选择合适的存储机制取决于以下五个因素：
        存储什么数据
        为了保证性能，要有多块的数据读取和写入速度
        有多少数据
        钥怎么查询数据
        数据要保存多久，对可靠性有什么要求

    本章会讨论三种不同的选择：
        存储数据而无需安装和配置DBMS
        用关系型数据库存储数据，具体说就是MySQL和PostgreSQL
        用NoSQL数据库存储数据，具体说就是Redis、MongoDB和Mongoose


5.1 无服务器的数据存储
   内存存储  文件存储

5.1.1 内存存储
    服务器重启后丢失
    例如：每次服务器重启后 统计页面访问次数的程序
    counter.js

    对于需要把数据存起来，在程序和服务器重启后能持久化的程序，
    基于文件的存储可能更合适。

5.1.2 文件存储
    经常用于存储方式保存程序的配置信息
    也可以用作数据的持久化
    这些数据在程序和服务器重启后依然有效

    并发问题
        两个用户会同时加载相同的文件进行修改
        一个版本会覆盖另一个
        导致某个用户的修改丢失
        对于多用户而言
        数据库管理系统使更合理的选择
        因为他们就是为应多并发问题而生的
    为了阐述如何使用基于文件的存储方式，
    将基于上一章的web 代办事项列表创建简单的命令行版本。
    把任务存储到.tasks文件中，跟运行的脚本在同一目录下。
    在保存之前，任务会被转换成JSON格式，从件中读出来的时候再从JSON格式转回来。

    穿件这个程序需要编写启动逻辑，并定义获取及存储任务的函数。

    1、编写启动逻辑
        这段逻辑从引入必须的模块开始，
        然后解析来自命令行参数的任务命令和描述
        并指明用来保存任务的文件
    2、定义获取任务的辅助函数
    3、定义一个存放任务的辅助函数

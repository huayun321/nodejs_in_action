第五章  存储Node程序中的数据

    本章内容
        内存和文件系统数据存储
        传统的关系型数据存储
        非关系型数据存储

    选择合适的存储机制取决于以下五个因素：
        存储什么数据
        为了保证性能，要有多块的数据读取和写入速度
        有多少数据
        钥怎么查询数据
        数据要保存多久，对可靠性有什么要求

    本章会讨论三种不同的选择：
        存储数据而无需安装和配置DBMS
        用关系型数据库存储数据，具体说就是MySQL和PostgreSQL
        用NoSQL数据库存储数据，具体说就是Redis、MongoDB和Mongoose


5.1 无服务器的数据存储
   内存存储  文件存储

5.1.1 内存存储
    服务器重启后丢失
    例如：每次服务器重启后 统计页面访问次数的程序
    counter.js

    对于需要把数据存起来，在程序和服务器重启后能持久化的程序，
    基于文件的存储可能更合适。

5.1.2 文件存储
    经常用于存储方式保存程序的配置信息
    也可以用作数据的持久化
    这些数据在程序和服务器重启后依然有效

    并发问题
        两个用户会同时加载相同的文件进行修改
        一个版本会覆盖另一个
        导致某个用户的修改丢失
        对于多用户而言
        数据库管理系统使更合理的选择
        因为他们就是为应多并发问题而生的
    为了阐述如何使用基于文件的存储方式，
    将基于上一章的web 代办事项列表创建简单的命令行版本。
    把任务存储到.tasks文件中，跟运行的脚本在同一目录下。
    在保存之前，任务会被转换成JSON格式，从件中读出来的时候再从JSON格式转回来。

    穿件这个程序需要编写启动逻辑，并定义获取及存储任务的函数。

    1、编写启动逻辑
        这段逻辑从引入必须的模块开始，
        然后解析来自命令行参数的任务命令和描述
        并指明用来保存任务的文件
    2、定义获取任务的辅助函数
    3、定义一个存放任务的辅助函数

5.2 关系型数据库管理系统
    关系数据库管理系统可以存储复杂的信息，并且查询起来很容易。
    RDBMS历来被用在相对高端的程序上，比如内容管理、客户关系管理和购物车。
    本节会看一看MySQL和PostSQL。

5.2.1 MySQL
    1、用MySQL构建一个工作跟踪程序
        创建一个web程序，用来记录你是如何度过工作日的。
        需要记录工作日的日期，花在工作上的事件，以及工作完成情况
        表单，用来输入工作的详细信息
        工作信息输入后，可以被归档或删除

        比起使用文件系统存储数据，RDBMS生成报表更容易，不用读取所有数据到内存中并检查记录的日期。

        构建工作记录程序需要完成下面这几项任务：
        创建程序逻辑
        创建程序需工作所需的辅助函数
        编写让你可以用MySQL添加、删除、更新和获取数据的函数
        编写渲染HTML记录和表单的代码

        这个程序会用Node内置的http模块实现web服务器的功能，用一个第三方模块跟mysql服务器交互
        一个名为timetrack的定制模块，它使程序特有的函数，用来在Mysql中存储、修改和获取数据

        安装mysql第三方模块node-mysql
        npm install mysql

    2、创建程序的逻辑
        创建两个文件存放程序逻辑
        分别是：timetrack_server.js  timetrack.js
        timetrack_server.js包含：
            node的http模块
            程序特定逻辑
            mysql api

            mysql配置需要填入host user password database
    3、创建辅助函数发送HTML，创建表单，接受表单数据
        包含node query string API
        用来发送HTML 接受表单数据的辅助函数
    4、用MySQL田间数据
    5、删除MySQL数据
    6、更新MySQL数据
    7、获取MySQL数据
    8、渲染MySQL记录
    9、渲染HTML表单
    10、试用一下

5.2.2 PostgreSQL
    1、链接POSTGRESQL
    2、往数据库表里插入一条记录
    3、创建返回结果的查询

    由于安装问题 略过
    有时间了再看


5.3 NoSQL数据库
    关系型DBMS为可靠性牺牲了性能，
    但很多nosql数据库把性能放在了第一位
    nosql数据库不需要预先定义数据shema，
    对于那种要把数据存储在层次结构中，
    但层次结构却会发生变化的程序而言，这很有帮助

    5.3.1 Redis

    磁盘空间有限，但是操作快，可以用磁盘中日志恢复数据。
    try.redis.io是个很好的起点
    redis支持集中简单的数据类型，包含哈系表和键值对，还是有集合（set）

    最成熟活跃的redis api模块使matt ranney的node_redis
    npm安装：
    npm install redis

    1、链接redis服务器
    2、操作redis中的数据
    3、用哈希表存储和获取数据
    4、用链表存储和获取数据
    5、用集合存储和获取数据
    6、用信道传递数据
    7、node_redis性能最大化
        hiredis会显著提高redis的性能
        npm install hiredis
        升级nodejs之后 需要重新编译hiredis
        npm rebuild hiredis


5.2.2 mongodb
    mongodb把文档存在集合中
    集合中的文档不需要相同的schema
    每个文档都可以有不同的schema
    使得mongodb比传统的rdbms更灵活
    因为不需要为预先定义schema而操心

    最成熟维护最活跃的mongodb api模块使node-mongodb-native

    npm install mongodb

    1、链接mongodb
        var mongodb =require('mongodb');
        var server = new mongodb.server('127.0.0.1', 27107, {})
        var client = new mongodb.Db('mydatabase', server, {w:1})
    2、访问mongodb集合
        client.open(function(err) {
            if (err) throw err;
            client.collection('test_insert', function(err, collection) {
                if (err) throw err;
                console.log('we are now able to perform queries.');
            });
        });

        向关闭mongodb链接可以执行client.close()
    3、将文档插入集合中
        colletion.insert(
            {
                "title": "I like cake",
                "body": "It is quite good"
            },
            {safe: true},  //安全模式表明数据库操作应该在回调执行之前完成
                           //如果回调逻辑对即将完成的数据库操作有任何形式的以来
                           //这就是你需要的选项
                           //如果你的回调逻辑不依赖于数据库操作，可以用{}取代{safe:true}关闭安全模式
            function(err, documents) {
                if (err) throw err;
                console.log("Document ID is: " + documents[0]._id);
            }
        );
        机关能用console.log将documents[0]._id显示为字符串
        mongodb的文档标识符使二进制JSON（BSON）
        BSON是mongodb用来交换数据的主要数据格式
        mongodb服务器用它代替json交换数据
        更节省空间 解析起来占用更少空间 扫表更容易     意味着数据交互更快
    4、用文档id更新数据
        bson文档标识符可以用来更新数据
        下面的代码战士了如何用文档的id更新它
        var _id = new client.bson_serializer
                                .ObjectID('4e650d344ac74b5a01000001');
            collection.update(
                {_id: _id},
                {$set: {"title": "I ate too much cake."}},
                {safe: true},
                function(err) {
                    if (err) throw err;
                }
            );
    5、搜索文档
        collection.find({"title": "I like cake"}).toArray(
            function(err, results) {
                if(err) throw err;
                console.log(results);
            }
        );
    6、删除文档
        var _id = new client
                        .bson_serializer
                        .ObjectID('4e6513f0730d31901000001');
        collection.remove({_id: _id}, {safe: true}, function(err) {
            if (err) throw err;
        });

        mongodb是一个强大的数据库
        node-mongodb-native提供了高性能的mongodb访问，
        但你可能享用一个抽象的数据库访问API，在底层帮你处理细节
        加快开发速度
        同时维护更少的代码
        这些API中最流行的使mongoose
5.3.3 mongoose
    mongoose 使LernBoost提供的一个Nodemokuai
    mongoose的模型提供了一个到mongodb结合接口，以及一些实用的功能
    比如schema层次结构  中间件  及 数据校验
    schema层次结构可以让一个模型跟其他模型关联
    比如让一片博客文章包含相关的评论
    中间件可以转换数据
    或在操作模型的数据过程中触发逻辑
    让删除父数据时对子数据的修剪这样的任务变成自动化的
    mongoose的校验支持让你可以在schema层面决定什么养的数据使可接受的
    而不是必须手工处理它
    学习它的在线文档mongoosejs.com对它的功能做一个全面了解，可定大有裨益
    安装
    npm install mongoose
    1、链接的打开和关闭
        var mongoose = require('mongoose');
        var db = mongoose.connect('mongodb://localhost/tasks');

        mongoose.disconnect();
    2、注册schema
        var Schema = mongoose.Schema;
        var Tasks = new Schema({
            project: String,
            description: String
        });
        mongoose.model("Task", Tasks);

        mongoose的schema很强大
        除了定义数据结构
        还可以设定默认值
        处理输入
        加强校验
        具体见官方文档

    3、添加任务
        var Task = mongoose.model('Task');
        var task = new Task();
        task.project = 'Bikeshed';
        task.description = 'Paint the bikeshed red.';
        task.save(function(err) {
            if (err) throw err;
            console.log('Task saved.');
        });
    4、搜索文档
        用Mongoose做搜索也一样容易
        Task模型的find方法可以用来查找所有文档，
        或者用一个javascript对象指明过滤标准来选择特定的文档

        var Task = mongoose.model('Task');
        Task.find({'project': 'Bikeshed'}, function(err, tasks) {
            for (var i =0; i < tasks.length; i++) {
                console.log('ID:' + tasks[i]._id);
                console.log(tasks[i].description);
            }
        });
    5、更新文档
        var Task = mongoose.model('Task');
        Task.update(
            {_id: '4e65b793d0cf5ca508000001'}, //用内部id更新
            {description: "Paint the bikeshed green."},
            {multi: false},//只更新一个文档
            function(err, rows_updated) {
                if (err) throw err;
                console.log("Updated.");
            }
        );
    6、删除文档
        一旦取得了文档 要删除它很容易
        可以用文档的内部id 或其他任何条件 find findById获取和删除文档
        var Task = mongoose.model('Task');
        Task.findById('4e65b3dce1592f7d08000001', function(err, task) {
            task.remove();
        });
5.4小结
    数据存储场景
    如果正在创建多用户的web程序，很可能用一个DBMS或类似的东西
    如果喜欢基于SQL的处理方式
        关系型数据库管理系统MYSQL POSTGRESQL都得到了很好的支持

    如果SQL在性能或灵活性上表现欠佳，
        REDIS 和MONGODB都是坚强如磐石的可选项
            MONGODB是极佳的通用DBMS
            REDIS擅长处理变化频繁，相对比较简单的数据

    如果你不需要一个华丽胡少的、全面的DBMS，想要避免设置上的麻烦，你有几个选项。
        如果速度和性能使关键，并且你不关心程序重启后的数据持久化
            内存存储可能很适合你
        如果你不关心性能，也不需要做复杂的数据查询，就像一个典型的命令行程序一样
            把数据存储在文件中可能可以满足你的需要

    可以在程序中使用多种存储机制
    譬如如果你想构建一个内容管理系统，
        可能会用文件存储web程序的配置选项
        用Mongodb存储文章
        用redis存储用户给出的文章评级
    如何实现持久化完全取决于你的想象力
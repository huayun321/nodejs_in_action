第八章 express

开始一个新的express程序
配置你的程序
创建express视图
处理文件上传和下载

事情即将变得更加有趣。
web框架express是构建在connect之上的，
它提供的工具和结构让编写web程序变得更容易、更快速、更有趣。
express提供了统一的视图系统，
你几乎可以使用任何你想用的模板引擎，
还有一些小工具，
让你可以用各种数据格式返回响应，
实现传送文件，路由URL等各种功能。

跟django或ror之类的框架比起来，
express非常小。
express的主导思想使程序的需求和实现变化非常大，
使用轻量的框架可以打造出你恰好需要的东西，
不会引入任何你不需要的东西。
express和整个node社区都致力于做出更小的，
模块化程度更高的功能实现，
而不是一个整体式框架。

本章会教你如何用express构建陈需，
我们以一个照片分享程序为例，
把整个构建过程从头到尾介绍一遍。
在这个过程中，你将学会如何完成下述任务：

    生成程序的初始结构;
    配置express和你的程序;
    渲染视图，集成模板引擎;
    处理表单和文件上传;
    处理资源下载。

这个照片存储程序最后会有一个看起来如图8-1所示的列表视图。
还会有一个用来上传新照片的表单，如图8-2所示。
最后会有一种下载照片的机制，如图8-3所示。
我们先从程序的结构开始入手吧。

8.1 生成程序骨架

express不会在程序机构上强迫开发者，
你可以把路由放在任意多的文件中，
公共资源文件也可以放到任何目录下，等等。
最小的express程序可能像下面代码清单中的这样小，
但也是一个功能完备的http服务器。

代码清单8-1 最小的express程序
minimal-express.js

express中有可执行的express(1)脚本，
它能帮你设置程序的骨架。
如果你刚接触express，
用生成的程序起步是个号办法，
因为它帮你设置了程序的模板、
公共资源文件、配置等等很多东西。

expree(1)生成的程序只有几个目录和文件，
如图8-4所示。
设计成这样的结构是为了让开发者在几秒之内就可以把express跑起来，
但你和你的团队完全可以自行创建程序的结构。

在本章的例子中，
我们使用的模板使ejs，
它的结构跟html很像。
ejs类似于php、jsp、和erb（在ruby中用），
服务器端javascript嵌在html文档中，
在发送到客户端之前执行。
我们在第11章还会详细讨论ejs。

到本章结束时，
你会有一个结构类似但做了些扩展的程序，如图8-5所示。

本节会带你完成如下任务：
    用npm安装全局express;
    生成程序;
    探索程序并安装依赖项。
让我们开始行动把！

8.1.1 安装express的可执行程序
首先用npm安装全局的express:
npm install -g express

=======================
从4.x开始
程序骨架生成器改为
npm install express-generator -g

express不再基于connect，
删除了核心中所有内置中间件，除了express.static
这意味着，express现在是一个独立的路由和中间件web框架，
express版本的发布不再基于中间件的更新。
========================


装好之后，你可以用--help标记看看可用的选项，如图8-6所示。
其中一些选项会帮你生成程序中的某些部分。
比如说，你可以指定模板引擎，
让它生成选定模板引擎的空模板文件。
类似的，如果你用--css选项指定了css预处理器，
它会为你生成选定css预处理器的资源文件。
如果你使用--session选项，
它会启用session中间件。
=========================
session在4.x之后需要单独安装
npm install express-session
============================
可执行程序装好后，
接下来我们钥生成最终会变成照片程序的程序骨架。

8.1.2 生成程序
要使用ejs模板引擎，
需要指定-e(或--ejs)标记，
执行express -e photo。
======================
ln -s /usr/bin/nodejs /usr/bin/node
======================
一个功能完备的程序会出现在photo目录中。
其中会有一个描述项目和依赖项的package.json文件，
程序文件本身，
public文件目录，
以及一个放路由的目录。

8.1.3 探索程序

我们来仔细看一下生成了什么东西。
在编辑器中打开package.json文件，
看看程序的依赖项，
如图8-8所示。
express猜不出你要用依赖项的哪个版本，
所以你最好给出模块的主要、次要及修订版本号，
以免引入意料之外的bug。
比如明确给出“express”：“3.0.0”，
那么每次安装时都会给你提供相同的代码。
要添加模块的最新版本，
比如这里的ejs，
可以在安装时给npm传入--save标记。
===============
4.x以后不需要 --save
===================
执行下面的命令，再次打开package.json,
看看它有什么变化：
npm install ejs --save
现在看一下express(1)生成的程序文件，
在下面的代码中。
暂时先不要动它。
其他的中间件在connect那一章都介绍过了，
但这个文件还是值得一看，
我们可以看看默认的中间件配置是如何设置的。

你已经得到了package.json和app.js文件，
但程序还跑步起来，
因为你还没装依赖项呢。
不管express()什么时候生成package.json文件，
你都需要安装依赖项（如图8-9所示）。
执行npm install安装依赖项，
然后执行node app.js启动程序。
在浏览器中访问http://localhost:3000查看程序。
默认的程序看起来像图8-10一样。
============================
4.x以后 默认express是当作模块导出的
不能直接跑
需要设置监听端口
app.listen(3000)
============================
看完生成的程序，
接下来我们要深入到特定环境下的配置中去。


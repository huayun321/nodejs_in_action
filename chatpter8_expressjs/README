第八章 express

开始一个新的express程序
配置你的程序
创建express视图
处理文件上传和下载

事情即将变得更加有趣。
web框架express是构建在connect之上的，
它提供的工具和结构让编写web程序变得更容易、更快速、更有趣。
express提供了统一的视图系统，
你几乎可以使用任何你想用的模板引擎，
还有一些小工具，
让你可以用各种数据格式返回响应，
实现传送文件，路由URL等各种功能。

跟django或ror之类的框架比起来，
express非常小。
express的主导思想使程序的需求和实现变化非常大，
使用轻量的框架可以打造出你恰好需要的东西，
不会引入任何你不需要的东西。
express和整个node社区都致力于做出更小的，
模块化程度更高的功能实现，
而不是一个整体式框架。

本章会教你如何用express构建陈需，
我们以一个照片分享程序为例，
把整个构建过程从头到尾介绍一遍。
在这个过程中，你将学会如何完成下述任务：

    生成程序的初始结构;
    配置express和你的程序;
    渲染视图，集成模板引擎;
    处理表单和文件上传;
    处理资源下载。

这个照片存储程序最后会有一个看起来如图8-1所示的列表视图。
还会有一个用来上传新照片的表单，如图8-2所示。
最后会有一种下载照片的机制，如图8-3所示。
我们先从程序的结构开始入手吧。

8.1 生成程序骨架

express不会在程序机构上强迫开发者，
你可以把路由放在任意多的文件中，
公共资源文件也可以放到任何目录下，等等。
最小的express程序可能像下面代码清单中的这样小，
但也是一个功能完备的http服务器。

代码清单8-1 最小的express程序
minimal-express.js

express中有可执行的express(1)脚本，
它能帮你设置程序的骨架。
如果你刚接触express，
用生成的程序起步是个号办法，
因为它帮你设置了程序的模板、
公共资源文件、配置等等很多东西。

expree(1)生成的程序只有几个目录和文件，
如图8-4所示。
设计成这样的结构是为了让开发者在几秒之内就可以把express跑起来，
但你和你的团队完全可以自行创建程序的结构。

在本章的例子中，
我们使用的模板使ejs，
它的结构跟html很像。
ejs类似于php、jsp、和erb（在ruby中用），
服务器端javascript嵌在html文档中，
在发送到客户端之前执行。
我们在第11章还会详细讨论ejs。

到本章结束时，
你会有一个结构类似但做了些扩展的程序，如图8-5所示。

本节会带你完成如下任务：
    用npm安装全局express;
    生成程序;
    探索程序并安装依赖项。
让我们开始行动把！

8.1.1 安装express的可执行程序
首先用npm安装全局的express:
npm install -g express

=======================
从4.x开始
程序骨架生成器改为
npm install express-generator -g

express不再基于connect，
删除了核心中所有内置中间件，除了express.static
这意味着，express现在是一个独立的路由和中间件web框架，
express版本的发布不再基于中间件的更新。
========================


装好之后，你可以用--help标记看看可用的选项，如图8-6所示。
其中一些选项会帮你生成程序中的某些部分。
比如说，你可以指定模板引擎，
让它生成选定模板引擎的空模板文件。
类似的，如果你用--css选项指定了css预处理器，
它会为你生成选定css预处理器的资源文件。
如果你使用--session选项，
它会启用session中间件。
=========================
session在4.x之后需要单独安装
npm install express-session
============================
可执行程序装好后，
接下来我们钥生成最终会变成照片程序的程序骨架。

8.1.2 生成程序
要使用ejs模板引擎，
需要指定-e(或--ejs)标记，
执行express -e photo。
======================
ln -s /usr/bin/nodejs /usr/bin/node
======================
一个功能完备的程序会出现在photo目录中。
其中会有一个描述项目和依赖项的package.json文件，
程序文件本身，
public文件目录，
以及一个放路由的目录。

8.1.3 探索程序

我们来仔细看一下生成了什么东西。
在编辑器中打开package.json文件，
看看程序的依赖项，
如图8-8所示。
express猜不出你要用依赖项的哪个版本，
所以你最好给出模块的主要、次要及修订版本号，
以免引入意料之外的bug。
比如明确给出“express”：“3.0.0”，
那么每次安装时都会给你提供相同的代码。
要添加模块的最新版本，
比如这里的ejs，
可以在安装时给npm传入--save标记。
===============
4.x以后不需要 --save
===================
执行下面的命令，再次打开package.json,
看看它有什么变化：
npm install ejs --save
现在看一下express(1)生成的程序文件，
在下面的代码中。
暂时先不要动它。
其他的中间件在connect那一章都介绍过了，
但这个文件还是值得一看，
我们可以看看默认的中间件配置是如何设置的。

你已经得到了package.json和app.js文件，
但程序还跑步起来，
因为你还没装依赖项呢。
不管express()什么时候生成package.json文件，
你都需要安装依赖项（如图8-9所示）。
执行npm install安装依赖项，
然后执行node app.js启动程序。
在浏览器中访问http://localhost:3000查看程序。
默认的程序看起来像图8-10一样。
============================
4.x以后 默认express是当作模块导出的
不能直接跑
需要设置监听端口
app.listen(3000)
============================
看完生成的程序，
接下来我们要深入到特定环境下的配置中去。

8.2 配置express和你的程序
程序的需求取决于它所运行的环境。
比如说，当你的产品处于开发环境中时，
你可能想要详尽的日志，但在生产环境中，
你可能想要精简的日志和gzip压缩。
除了配置特定环境下的功能，
你可能也向定义一些程序层面的设定，
以便让express知道你用的使什么模板引擎，
以及到哪里去找模板。
express还允许你定义定制的配置键值对。

express有一个极简的环境驱动配置系统，
由五个方法组成，
全部由环境变量node_env驱动：
    app.configure()
    app.set()
    app.get()
    app.enable()
    app.disable()
=============================
4.x 后express不再使用app.configure()
=============================
在本节中，
你将会看到如何用配置系统定制express的行为，
以及如何依照你的目的在开发过程中使用它。

我们先认真探讨下“基于环境的配置”意味着什么。

设定环境变量
要在unix中设置环境变量，可以用这个命令：
$NODE_ENV=production node app
在windows中用这个：
set NODE_ENV=production
node app
这些环境变量会出现在你程序里的process.env对象中。
===============================
4.x 后改为随意  可以在app里设定set一个变量 然后判断
或者 获取系统的环境变量 process.env.*
linux系统可以设置 系统环境变量 用户环境变量
临时环境变量
===============================
基于环境的配置
尽管环境变量源自express，
但现在很多node框架都用它通知Node程序它在什么环境中，
默认为开发环境。

如代码8-3所示，
app.configure()方法接受一个表示环境的可选字符串，
以及一个函数。
当环境与传入的字符串匹配时，
回调函数会立即被调用;
当只给出函数时，
在所有环境中都会调用它。
这些环境的名称完全使随意的。
比如说，
你可以用development、stage、test和production,或简写为prod。

代码清单 8-3 用app.configure()设定特定环境的选项
app.configure(function(){
    app.set('views', __dirname + 'views');
    app.set('view engine', 'ejs');
});

app.configure('development' function() {
    app.use(exrpess.errorHandler());
});

app.configure()只是糖衣，下面这段代码和前面那个效果是一样的。
你不是必须用这个特性;
比如说，你可以从json或yaml中加载配置。
代码清单8-4 用条件判断设定特定环境的选项
var env=process.env.NODE_ENV || 'development';

app.set('views', __dirname + '/views');
app.set('view engine', 'ejs');

if('development' == env) {
    app.use(express.errorHandler());
}

================
4.x后 只使用下面的方法
=================
为了让你你可以定制express的行为，
express内部使用了配置系统，
但你也可以使用配置系统。
本章要构建的程序只有一个设定项，
photos，
它的值是一个目录，
用来存放传上来的图片。
这个值在生产环境中可以修改，
以便在有更多硬盘空间的卷中保存和提供照片：
app.configure(function() {
    app.set('photos', __dirname + '/public/photos');
});

app.configure('production', function() {
    app.set('photos', '/mounted-volume/photos');
});

express还为boolean类型的配置项提供了app.set()和app.get()的变体。
比如说，
app.enable(setting)等同于app.set(setting, true),
app.enabled(setting)可以用来检查该值是否启用了。
app.disable(setting)和app.disabled(setting)补足了boolean类型的变体。
看完了如何使用配置系统，接下来我们去看看express中的视图渲染。


8.3 渲染视图
尽管我们前面说过，几乎所有node社区中的模板引擎都能用在express中，
但本章的程序用的是ejs模板。
不熟悉ejs也不用担心，它很像其他语言(php jsp erb)中的模板语言。
本章只是介绍一些ejs的基础知识，但第11章会详细介绍ejs和其他几个模板引擎。

不管是渲染整个html页面、一个html片段，
或者一个rss预订源，渲染视图对几乎所有程序来说都至关重要。
它的概念很简单：
你把数据传给视图，然后数据会被转换，
通常是变成web程序中的html。
视图的概念对你来说应该不算陌生，
因为大多数框架都提供了类似的功能。
图8-11阐明了视图如何形成新的数据表示。

express中两种渲染视图的办法：
在程序层面用app.render(),
在请求或响应层面用res.render(),
它在内部用的也是前者。
本章只用res.render()。
如果你看一下./routes/index.js，
会看到一个输出的函数：index。
这个函数调用res.render()，
渲染./views/index.ejs模板，代码如下所示：
exports.index=function(req, res) {
    res.render('index', {title: 'express'});
};
在本节中，你会了解如何进行下列操作：
    配置express视图系统;
    查找视图文件;
    在渲染视图时输出数据。
在认真研究res.render()之前，我们先来配置视图系统。

8.3.1 视图系统配置

express视图系统配置起来很简单。
即便express(1)帮你生成了配置，
你还是应该直到它的底层机制，
这样才能在需要时修改它。
我们重点会介绍三个领域：
    调整视图查找;
    配置默认的模板引擎;
    启用视图缓存，减少文件I/O。
首先使视图的设定。

改变查找目录
下面的代码片段是express的可执行程序创建的视图设定：
app.set('views', __dirname + '/view');

这个制定了express在查找视图时所用的目录。
用__dirname是个好主意，
这样你的程序就不会依赖于作为程序根目录的当前工作目录。

__dirname
node中的__dirname（前面有两个下划线）使一个全局变量，
用来确定当前运行的文件所在的目录。
譬如 /test/index.js /test/lib/test.js test中输出__dirname无论是从哪调用test.js 输出的都是/test/lib
在开发时，这个目录通常跟你的当前工作目录（cwd）是同一个目录，
但在生产环境中，node可能是从另外一个目录中运行的。
用__dirname有助于保持路径在各种环境中的一致性。

下一个设定使view engine。

默认的模板引擎

express(1)生成程序时，
view engine被设定为ejs是因为命令行中的-e选项选择了模板引擎EJS。
这个设定让你可以在渲染中用Index,不用index.ejs。
否则，experss需要有扩展名才能确定用哪个模板引擎。

你可能在向express为什么还要考虑扩展名。
因为有了扩展名可以在一个express程序中使用多个模板引擎，
同时又能跟常用用例提供一个清晰的API，
因为大多数程序都是用一个模板引擎。

比如说，你发现用另外一种模板引擎写RSS预订源更容易，
或者你可能从一个模板引擎迁移到了另一个上。
你可能将jade作为默认引擎，ejs用于/feed路由，
就像下面的代码清单中这样指明.ejs扩展名。

代码清单8-5 用文件扩展名制定模板引擎
app.set('view engine', 'jade');

app.get('feed', function() {
    res.render('res.ejs')
});

让package.json保持同步
记住，你享用的任何额外模板引擎都应该添加到package.json的依赖项对象中。

视图缓存

生产环境中会默认启用view cache设定，
并防止后续的render()调用执行硬盘I/O。
模板的内容保存在内存中，性能会得到显著提升。
启用这个设定的副作用是只有重启服务器才能让模板文件的编辑生效，
所以在开发时会禁用它。
如果你正运行在分级（staging）环境中，
很可能要启用这个选项。


如图8-12所示，在view cache被禁用时，
每次请求都会从硬盘上读取模板。
这样你无需重启程序就可以让模板的修改生效。
当启用view cache时，
每个模板只会读取一次硬盘。

你已经直到视图缓存机制如何帮助提升非开发环境中的程序性能了。
接下来我们看看express如何定位视图来渲染他们。


8.3.2 视图查找
你已经直到如何配置视图系统了，
现在我们来看一下express是如何查找视图的，
即在哪里定位目标视图文件。
先不要管这些模板的创建，你后面会做的。

查找视图的过程跟Node的require()工作机制类似。
当res.render()或app.render()被调用时，
express会先检查是否有文件在这个绝对路径上。
接着会找8.3.1节讨论的视图目录设定的相对路径。
最后，express会尝试使用index文件。
这个过程如图8-13中的流程图所示。

因为默认的引擎被设定为ejs，
所以render会忽略.ejs扩展名，
但它仍能正确解析。

随着程序的不断进化，
你会需要更多的视图，
并且有时一个资源需要几个视图。
用view lookup可以帮你组织这些视图，
比如说，你可以使用跟资源相连的子目录，
在其中创建视图，
比如图8-14中的photos目录。

添加子目录可以去掉模板名称中的冗余部分，
比如upload-photo.ejs和show-photo.ejs。
express会添加view engine扩展名，
将视图解析为./views/photos/upload.ejs。

express会检查是否有名问index的文件在那个目录中。
当文件的名称为负数时，比如photos，
通常暗示着这是一个资源列表。
图8-14的res.render('photos')就是这样的例子。

你已经直到express是如何查找视图的了，
那么我们开始创建照片列表，
把这个功能用起来把。

8.3.3 把数据输出到视图中

在express中，
要把本地变量输出到被渲染的视图有几种办法，
不过首先要有可渲染的东西。
本节会用一些假数据组装出照片列表的初始视图。

我们暂时先不引入数据库，
而是做一些假数据。
先创建文件./routes/photos.js，
其中包含与照片相关的路由。
然后在这个文件中创建一个photos数组，
让它充当我们的临时数据库。
代码如下所示：

见server.js

内容有了，
还需要一个显示它的路由。

创建照片列表视图
要显示这些照片数据，
需要先定义一个路由去渲染ejs照片视图， 如图8-15所示。

我们先从./routes/photos.js开始，
打开这个文件，
输出函数list(代码在下面的清单中)。
实际上，
你可以按自己的想法命名这个函数。
路由函数等同于普通的connect中间件函数，
接受请求和响应对象，
以及回调next（）,
不过这个例子中没用。
把对象传给res.render()方法使第一种，
也是最主要的向视图传递数据的办法。

见/routes/photos.js

然后你可以在./app.js中引入photos模块，
访问你刚刚写好的exports.list函数。
为了在首页中显示照片，
钥把photos.list函数传给app.get()方法，
它会把路径上的http get 方法映射到这个函数上。
见phtos.list路由
=====================
使用了4.x新的路由系统
======================
数据和路由都准备好了，
你可以写照片的视图了。
跟照片有管的视图有几个，
所以我们钥创建目录./views/photos,
并在里面放一个index.ejs文件。
你可以用javascript的forEach循环遍历传给res.render()的photos对象，
逐一处理其中的photo,
显示每张照片的名称和图片，
像下面的代码清单中那样。
见views/index.ejs

如果你对程序的样式感兴趣，下面是./public/stylesheets/style.css中的css
见style.css

用node server.js启动程序，
在你的浏览器中访问http://localhost:/3000/photos
你会看到之前在图8-15中显示的照片。

将数据输出到视图中的方法

你已经见过如何将本地变量直接传给res.render()了，
但除此之外还有其他办法可用。
比如用app.locals传递程序层面的变量，
用res.locals传递请求层面的本地变量。

直接传给res.render()的值优先级高于通过res.locals和app.locals设定的值，
如图8-16所示。

express默认只会向视图中输出一个程序级变量，
settings,
这个对象中包含所有用app.set（）设定的值。
比如app.set('title', 'My Application')
会把settings.title输出到模板中，
请看下面的ejs代码片段：
见server.js views/index.ejs

从express内部来看，
它使用下面的javascript输出这个对象的：
app.locals.settings = app.settings;
全都在这了。

为了方便，
app.locals也被做成了一个javascript函数。
当有对象传入时，
所有的键都会被合并，
所以如果你有想整体输出的对象，
比如某些i18n数据，
可以这样做：

var i18n = {
    prev: 'Prev',
    next: 'Next',
    save: 'Save'
}

app.locals(i18n);

这样会把prev、next和save输出到所有模板中。
我们可以用这个特性输出视图的辅助函数，
从而减少模板中的逻辑。
比如说，
如果你有一个输出了几个函数的node模块helpers.js，
可以像下面这样把所有函数输出到视图中：
app.locals(require('./helpers'));

接下来我们钥给这个网站添加一个文件上传的功能，
并学习一下express如何使用connect的中间件bodyParser实现这一功能。
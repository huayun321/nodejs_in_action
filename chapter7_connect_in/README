第七章 Connect自带的中间件

本章内容
    解析cookie、请求主体和查询字符串的中间件
    实现web程序核心功能的中间件
    处理web程序安全的中间件
    提供静态文件服务的中间件

    在上一章里，
    你已经学过了中间件是什么了，
    也学过如何创建中间件，
    以及在Connect中如何使用他们了。
    但Connect真正强大之处在于它自带的中间件，
    他们可以满足常见的web程序开发需求，
    比如会话管理、cookie解析、请求主体解析、请求日志等。
    这些复杂程度各异的中间件为构建简单的Web程序或更高层的Web框架提供了绝佳的起点。

    本章通篇都在解释和阐述这些常用的自带中间件组件。
    表7-1 使我们将要讨论的中间件汇总。
    我们首先会讨论构建前当的web程序所需的各种解析器中间件，
    因为他们是大多数中间件的基础。

    表7-1 connect中间件快速参考指南

    中间件组件       章节      介绍
    cookieParser()  7.1.1    为后续中间件提供哦你req.cookies和req.signedCookies
    bodyParser()    7.1.2    为后续中间件提供req.body和req.files
    limit()         7.1.3    基于给定字节长度限制请求主体的大小。必须用在bodyParser中间件之前
    query()         7.1.4    为后续中间件提供req.query
    logger()        7.2.1    将http请求的信息输出到stdout或日志文件之类的流中
    favicon()       7.2.2    响应/favicon.ico http请求。通常放在中间件logger前面，这样它就不会出现在你的日志文件中了
    methodOverride()7.2.3    可以替不能使哟你正确请求方法的浏览器仿造req.method，依赖于bodyParser
    vhost()         7.2.4    根据制定的主机名（比如nodejs.org）使用给定的中间件和或http服务器实例
    session()       7.2.5    为用户设置一个http会话，并提供一个可以跨越请求的持久化req.session对象。依赖于cookieParser
    basicAuth()     7.3.1    为程序提供http基本认证
    csrf()          7.3.2    防止http表单中的跨站请求伪造攻击，依赖于session
    errorHandler()  7.3.3    当出现错误时把堆栈跟踪信息返回给客户端。在开发时很使用，不过不要用在生产环境中。
    static()        7.4.1    把指定目录中的文件发给http客户端。跟connect的挂载功能配合的很好
    compress()      7.4.2    用gzip压缩优化http响应
    directory()     7.4.3    为http客户端提供目录清单服务，基于客户端的accept请求头（普通文本，json或html）提供经过优化的结果



7.1 解析cookie、请求主体和查询字符串的中间件
    7.1.1 cookieParser(): 解析http cookie
        1、基本用法
        2、常规cookie
        3、签名cookie
        4、JSON cookie
        5、设定出站 cookie
    7.1.2 bodyParser(): 解析请求主体
        1、基本用法
        2、解析JSON数据
        3、解析常规的<form>数据
        4、解析multipart<form>数据
    7.1.3 limit(): 请求主体的限制
        1、为什么需要limit()
        2、基本用法
        3、给limit()更大的灵活性
    7.1.4 query(): 查询字符串解析
        基本用法

7.2 实现web程序核心功能的中间件
    7.2.1 logger(): 记录请求
        1、基本用法
        2、定制日志格式
        3、日志选项： stream、immediate 和buffer
    7.2.2 favicon(): 提供favicon
        基本用法
    7.2.3 methodOverride(): 伪造http方法
        1、基本用法
        2、访问原始的req.method
    7.2.4 vhost(): 虚拟主机
        1、基本用法
        2、使用多个vhost()实例
    7.2.5 session(): 会话管理
        1、基本用法
        2、设定会话有效期
        3、处理会话数据
        4、操纵会话cookie
        5、会话存储

7.3 处理web安全的中间件
    7.3.1 basicAuth(): http基本认证
        1、基本用法
        2、提供回调函数
        3、提供异步回调函数
        4、使用curl(1)的例子
    7.3.2 csrf(): 跨站请求伪造防护
        基本用法
    7.3.3 errorHandler(): 开发错误处理
        1、基本用法
        2、接收html 错误响应
        3、接受普通文本错误响应
        4、接收json错误响应

7.4 提供静态文件服务的中间件
    7.4.1 static(): 静态文件服务
        1、基本用法
        2、使用带挂载的static()
        3、绝对与相对目录路径
        4、请求目录使返回Index.html
    7.4.2 compress(): 压缩静态文件
        1、基本用法
        2、使用定制的过滤器函数
        3、制定压缩及内存水平
    7.4.3 directory(): 目录列表
        1、基本用法
        2、使用带挂载的directory()

7.5 小结
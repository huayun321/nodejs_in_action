第四章 构建node web程序

4.1 HTTP服务器的基础知识
    node 程序分层概览
        node核心模块 querystring http net
        社区模块 node-formidable node-cgi socket.io mongoose express connect
        应用逻辑 http.createServer() app.use()
    本节内容：
        node如何向开发者呈现http请求
        如何编写一个简单的HTTP服务器，用“hello world”做响应;
        如何读取请求头，以及如何设置响应头
        如何设置http响应的状态码

4.1.1 node 如何向开发者呈现HTTP请求
        var http = require('http');
        var server = http.createServer(function(req, res) {
            //处理请求
        });
        node解析http头 -> 用新的req（req对象一部分使解析的http头） res对象填充 回调函数
        ->处理请求体 -> res res.end()
4.1.2 一个用“Hello World”做响应的HTTP服务器
        helloworld.js

4.1.3 读取请求头及设定响应头
        node提供了几个修改http响应头的方法：
            res.setHeader(field, values)
            res.getHeader(field)
            res.removeHeader(field)

            var body = 'Hello world';
            res.setHeader('Content-Length', body.length);
            res.setHeader('Content-Type', 'text/plain');
            res.end(body);

        添加和移除响应头的顺序可以随意，
        但一定要在res.write()或res.end()之前
        node在响应主体的第一部分写入后，会刷新已经设定好的响应头

4.1.4 设定HTTP响应的代码
        除了默认的200状态码，有时要返回其他状态码 例如404 302 等等
        通过res.statusCode设定
        在程序响应期间可以随时给这个属性赋值
        必须在第一次调用res.write 和res.end之前

        var url = 'http://google.com';
        var body = '<p>Redirecting to <a href="' + url + '">'
                    + url + '</a></p>';
        res.setHeader('Location', url);
        res.setHeader('Content-Length', body.length);
        res.setHeader('Content-Type', 'text/html');
        res.statusCode = 302;
        res.end(body);

4.2 构建RESTful Web 服务
    restful post get update delete
    soap
4.2.1 用POST请求创建资源

4.2.2 用GET请求获取资源

4.2.3 用DELETE请求移除资源

4.3 提供静态文件服务
    创建一个简单的静态文件服务器
    用pipe()优化传输数据
    通过设定状态码处理用户和文件系统错误
4.3.1 创建一个静态文件服务器
        __dirname 是当前文件所在位置
        可以使用pipe 从一个readable stream 写入到一个writeable stream
        ReadableStream.pipe(WritableStream);
        var readStream = fs.createReadStream('./original.txt')
        var writeStream = fs.createWriteStream('./copy.txt')
        readStream.pipe(writeStream);
        req.pipe(fs.createWriteStream('./req-body.txt');
4.3.2 处理服务器错误
        如果文件不存在  上面所写的file server会出现错误
4.3.3 用fs.stat()实现先发制人的错误处理
        file_server_with_error_check.js
4.4 从表单中接受用户输入
    处理提交的表单域
    用formidable处理上传文件
    实时计算上传进度

4.4.1 处理提交的表单域
        form.js

        //querystring
        node
        var qs = require('querystring');
        var body = 'item=take+ferrets+to+the+vet';
        qs.pare(body);
        {item:'take ferrets to the vet'}
4.4.2 用formidable处理上传的文件
4.4.3 计算上传进度

4.5 用HTTPS加强程序的安全性

4.6 小结